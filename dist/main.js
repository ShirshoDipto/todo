(()=>{"use strict";class t{constructor(t,e,i){this.title=t,this.todos=e,this.listNumber=i}get getListNumber(){return this.listNumber}set setListNumber(t){this.listNumber=t}get getTitle(){return this.title}get getTodos(){return this.todos}set setTodos(t){this.todos=t}set setTitle(t){this.title=t}set setTodos(t){this.todos=t}addNewList(t){this.todos.push(t)}}class e{constructor(t,e,i,s,o,l,r){this.title=t,this.description=e,this.dueDate=i,this.priority=s,this.listNumber=o,this.completed=l,this.todoNumber=r}get getTodoNumber(){return this.todoNumber}set setTodoNumber(t){this.todoNumber=t}get getIsCompleted(){return this.completed}changeCompleteStatus(){1===this.completed?this.completed=0:this.completed=1}get getListNumber(){return this.listNumber}set setListNumber(t){this.listNumber=t}get getTitle(){return this.title}get getDescription(){return this.description}get getDueDate(){return this.dueDate}get getPriority(){return this.priority}set setTitle(t){this.title=t}set setDescription(t){this.description=t}set setDueDate(t){this.dueDate=t}set setPriority(t){this.priority=t}}let i=[];function s(t,e,s){i.push(t);const o=document.createElement("div");o.classList.add("a-list"),o.setAttribute("list-number",`${t.getListNumber}`),o.setAttribute("id","active-list"),e.insertBefore(o,s);const l=document.createElement("div");l.classList.add("left"),o.appendChild(l);const r=document.createElement("div");r.classList.add("right"),o.appendChild(r);const n=document.createElement("img");n.classList.add("icon"),n.setAttribute("src","icons/plus.png"),l.appendChild(n);const c=document.createElement("div");c.classList.add("list-title"),c.textContent=t.getTitle,l.appendChild(c);const d=document.createElement("img");d.classList.add("icon"),d.setAttribute("src","icons/plus.png"),r.appendChild(d);const u=document.createElement("img");u.classList.add("icon"),u.setAttribute("src","icons/plus.png"),r.appendChild(u);const a=document.createElement("img");a.classList.add("icon"),a.setAttribute("src","icons/plus.png"),r.appendChild(a);const m=document.createElement("img");return m.classList.add("delete"),m.setAttribute("src","icons/plus.png"),r.appendChild(m),o}function o(t){if(0===i.length)return;const e=t.firstElementChild;if("active-list"===e.getAttribute("id"))e.removeAttribute("id");else{let t=e.nextElementSibling;for(;;){if("active-list"===t.getAttribute("id")){t.removeAttribute("id");break}t=t.nextElementSibling}}}function l(t){let e=0;for(let s=0;s<i.length;s++)if(i[s].setListNumber=s,0!==i[s].getTodos.length){let o=0;const l=i[s].getListNumber;for(let r of i[s].getTodos){r.setListNumber=s,r.setTodoNumber=o;let i=t[e];i.removeAttribute("list-number"),i.setAttribute("list-number",`${l}`),i.removeAttribute("todo-number"),i.setAttribute("todo-number",`${o}`),o++,e++}}}let r=[];function n(t,e,i){t.setAttribute("list-number",`${e}`),t.firstElementChild.textContent=i}function c(t,e){if(null!==t)for(let i of t)i.getAttribute("list-number")===e?i.removeAttribute("id"):i.setAttribute("id","hide")}function d(t,e){let i=0;for(let s of t){let t=s.getTitle,o=s.getDescription,l=s.dueDate,r=s.getPriority,n=s.getListNumber,c=s.getIsCompleted,d=s.getTodoNumber;localStorage.setItem(`list_${e}_todo_${i}`,`${t},${o},${l},${r},${n},${c},${d}`),i++}}function u(t){localStorage.clear();let e=0;for(let i of t){let t=i.getTitle,s=i.getListNumber;localStorage.setItem(`list_${e}`,`${t},${s}`),d(i.getTodos,e),e++}}let a="0";function m(t){if("delete"===t.target.classList.value)!function(t){if("a-list"===t.classList.value){const e=t.getAttribute("list-number");p.removeChild(t);const s=Array.from(document.querySelectorAll(".a-list"));let o=Array.from(document.querySelectorAll(".all-todo .a-todo"));!function(t,e,i){for(let s of e)s.getAttribute("list-number")===i&&t.removeChild(s)}(T,o,e),o=Array.from(document.querySelectorAll(".all-todo .a-todo")),function(t,e,s){i.splice(parseInt(e),1);let o=0;for(let e of t)e.removeAttribute("list-number"),e.setAttribute("list-number",`${o}`),o++;l(s)}(s,e,o),function(t,e){0===i.length?(q.firstElementChild.textContent="Add a List",q.firstElementChild.nextElementSibling.textContent="placeholder"):"0"===e?(document.querySelector('.all-list div[list-number="0"]').setAttribute("id","active-list"),n(q,e,i[0].getTitle),c(t,"0"),a="0"):(document.querySelector(`.all-list div[list-number="${parseInt(e)-1}"]`).setAttribute("id","active-list"),n(q,e,i[parseInt(e)-1].getTitle),c(t,""+(parseInt(e)-1)),a=""+(parseInt(e)-1))}(o,e),a=e}u(i)}(this);else{o(p),this.setAttribute("id","active-list");let e=t.target.getAttribute("list-number");n(q,e,this.firstElementChild.lastElementChild.textContent),c(Array.from(document.querySelectorAll(".a-todo")),e),a=e}console.table(i)}function g(t){if("delete"===t.target.classList.value){const t=this.getAttribute("list-number"),e=this.getAttribute("todo-number");i[parseInt(t)].getTodos.splice(parseInt(e),1),console.table(i),T.removeChild(this),l(Array.from(document.querySelectorAll(".all-todo .a-todo")))}u(i)}localStorage.clear();const p=document.querySelector(".all-list"),b=document.querySelector("#list-name"),h=document.querySelector(".list-form"),f=document.querySelector(".add-new-list"),A=document.querySelector(".new-list-modal"),L=document.querySelector(".add-todo"),v=document.querySelector(".new-todo-modal"),y=document.querySelector(".todo-form"),C=document.querySelector("#todo-name"),S=document.querySelector("#due-date"),E=document.querySelector("#priority"),N=document.querySelector("#description"),T=document.querySelector(".all-todo"),q=document.querySelector(".todo-header");localStorage.getItem("html-page")?function(){let i=[],s=[];for(let o in localStorage)if(o.includes("list")&&!o.includes("todo")){const e=localStorage.getItem(o).split(","),s=e[0],l=parseInt(e[1]),r=new t(s,[],l);i.push(r)}else if(o.includes("todo")){const t=localStorage.getItem(o).split(","),i=t[0],l=t[1],r=t[2],n=t[3],c=parseInt(t[4]),d=parseInt(t[5]),u=parseInt(t[6]),a=new e(i,l,r,n,c,d,u);s.push(a)}let o=function(t){return t.sort(((t,e)=>t.getListNumber>e.getListNumber?1:-1))}(i);!function(t,e){for(let i of e)t[i.getListNumber].getTodos.push(i);for(let e of t){const t=e.getTodos.sort(((t,e)=>t.getTodoNumber>e.getTodoNumber?1:-1));e.setTodos=t}}(o,s)}():(s(new t("My Day",[],0),p,A),u(i));const $=document.querySelectorAll(".all-list .a-list"),I=document.querySelectorAll(".all-todo .a-todo");L.onclick=()=>{v.removeAttribute("id")},f.addEventListener("click",(()=>{A.removeAttribute("id")})),h.onsubmit=function(e){e.preventDefault();let l=new t(b.value,[],i.length);o(p);const r=s(l,p,A),d=Array.from(document.querySelectorAll(".a-todo"));n(q,l.getListNumber,l.getTitle),c(d,l.getListNumber.toString()),a=l.getListNumber.toString(),r.onclick=m,e.target.reset(),A.setAttribute("id","hide"),console.log(i),u(i)},h.onreset=()=>{A.setAttribute("id","hide")},y.onsubmit=function(t){t.preventDefault();const s=parseInt(q.getAttribute("list-number")),o=i[parseInt(s)].getTodos.length;let l=new e(C.value,N.value,S.value,E.value,s,0,o);i[parseInt(s)].getTodos.push(l);const n=function(t,e){r.push(e);const i=document.createElement("div");i.classList.add("a-todo"),i.setAttribute("list-number",`${e.getListNumber}`),i.setAttribute("todo-number",`${e.getTodoNumber}`),t.appendChild(i);const s=document.createElement("div");s.classList.add("a-list"),i.appendChild(s);const o=document.createElement("div");o.classList.add("description"),o.textContent=e.getDescription,i.appendChild(o);const l=document.createElement("div");l.classList.add("collapse"),i.appendChild(l);const n=document.createElement("div");n.classList.add("left"),s.appendChild(n);const c=document.createElement("div");c.classList.add("right"),s.appendChild(c);const d=document.createElement("img");d.setAttribute("src","icons/plus.png"),d.setAttribute("alt","collapse icon"),l.appendChild(d);const u=document.createElement("input");u.setAttribute("type","checkbox"),u.setAttribute("id","todo-checkbox"),u.setAttribute("name","todo-checkbox"),n.appendChild(u);const a=document.createElement("div");a.textContent=`${e.getTitle} (Due: ${e.getDueDate})`,n.appendChild(a);const m=document.createElement("img");m.setAttribute("src","icons/plus.png"),m.classList.add("icon"),c.appendChild(m);const g=document.createElement("img");g.setAttribute("src","icons/plus.png"),g.classList.add("icon"),c.appendChild(g);const p=document.createElement("img");p.setAttribute("src","icons/plus.png"),p.classList.add("icon"),c.appendChild(p);const b=document.createElement("img");return b.setAttribute("src","icons/plus.png"),b.classList.add("delete"),c.appendChild(b),i}(T,l);n.onclick=g,v.setAttribute("id","hide"),t.target.reset(),console.table(i),u(i)},y.onreset=()=>{v.setAttribute("id","hide")},$.forEach((t=>{t.onclick=m})),I.forEach((t=>{t.onclick=g}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,